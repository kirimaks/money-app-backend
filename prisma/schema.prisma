generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id          String        @id @default(cuid())
  name        String        @default("")
  users       User[]
  Category    Category[]
  Transaction Transaction[]
  TagGroup    TagGroup[]
  Tag         Tag[]
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  passwordHash String
  firstName    String        @default("")
  lastName     String        @default("")
  accountId    String
  account      Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  Transaction  Transaction[]
}

// TODO: remove
model Category {
  id   String @id @default(cuid())
  name String

  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  Transaction Transaction[]

  @@unique(fields: [accountId, id], name: "category_id_by_account")
  @@index([accountId])
}

model Budget {
  id          String        @id @default(cuid())
  name        String
  Transaction Transaction[]
}

model MoneySource {
  id          String        @id @default(cuid())
  name        String
  Transaction Transaction[]
}

model Transaction {
  id            String   @id @default(cuid())
  name          String
  amount_cents  BigInt
  utc_timestamp DateTime // rename to utc_datetime

  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  budgetId String?
  budget   Budget? @relation(fields: [budgetId], references: [id], onDelete: SetNull)

  sourceId        String?
  source          MoneySource?      @relation(fields: [sourceId], references: [id], onDelete: SetNull)
  TransactionTags TransactionTags[]

  @@unique(fields: [accountId, id], name: "transaction_id_by_account")
  @@index([accountId, categoryId, utc_timestamp])
  @@index([accountId, utc_timestamp])
  @@index([accountId, budgetId, utc_timestamp])
}

model TagGroup {
  id   String @id @default(cuid())
  name String

  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  tags      Tag[]

  @@unique(fields: [accountId, name], name: "group_name_by_account")
}

model Tag {
  id   String @id @default(cuid())
  name String

  tagGroupId String
  tagGroup   TagGroup @relation(fields: [tagGroupId], references: [id], onDelete: Cascade)

  accountId       String
  account         Account           @relation(fields: [accountId], references: [id], onDelete: Cascade)
  TransactionTags TransactionTags[]

  @@unique(fields: [tagGroupId, name], name: "tag_name_by_group_id")
}

model TransactionTags {
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  tagId String
  tag   Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique(fields: [transactionId, tagId], name: "transaction_id_by_tag")
}
